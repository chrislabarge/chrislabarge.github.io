<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby-on-rails on Chris LaBarge - Software Developer - Portfolio</title>
    <link>https://chrislabarge.com/tags/ruby-on-rails/</link>
    <description>Recent content in ruby-on-rails on Chris LaBarge - Software Developer - Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Oct 2020 18:30:21 -0500</lastBuildDate>
    
	<atom:link href="https://chrislabarge.com/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Popup with Tippy.js, Ruby on Rails 6, Stimulus and Webpacker</title>
      <link>https://chrislabarge.com/posts/stimulus-popup/</link>
      <pubDate>Fri, 30 Oct 2020 18:30:21 -0500</pubDate>
      
      <guid>https://chrislabarge.com/posts/stimulus-popup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://popup-demo.herokuapp.com/&#34;&gt;Demo Application&lt;/a&gt; - Hosted on a Free dyno. (May take 10-20 seconds to wake up)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chrislabarge/popup-demo&#34;&gt;Github&lt;/a&gt; - Git repo for the hosted application.&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Ruby on Rails 6.0.2.2&lt;/a&gt; - Ruby Web Framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stimulusjs/stimulus&#34;&gt;StimulusJS&lt;/a&gt; - A minimal Javascript framework developed by Basecamp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/webpacker&#34;&gt;Webpacker&lt;/a&gt; - Rails gem for using Webpack to bundle assets including Javascript modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atomiks.github.io/tippyjs/&#34;&gt;Tippy.js&lt;/a&gt; - Popup Javascript library.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;set-up&#34;&gt;Set Up&lt;/h2&gt;
&lt;p&gt;This tutorial assumes that you have a Rails application with webpacker and stimulus installed (&lt;em&gt;along with some familiarity using each&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If you are using Rails &amp;gt;= 6.0 version, you can generate the application with the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rails new sample_app --webpacker&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;stimulus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The model we will be working with from the demo is &lt;code&gt;Fabric&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have a typical index listing of the Fabric in the system:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appviewsfabrics_fabrichtmlhaml-&#34;&gt;app/views/fabrics/_fabric.html.haml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;li
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;avatar
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; img_pack_tag(fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image, &lt;span style=&#34;color:#f1fa8c&#34;&gt;class&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;circular&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/popup-index.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, the avatar is too small for comparing fabrics, and it would be nice to have the image enlarged when hovering over it.&lt;/p&gt;
&lt;p&gt;We will need to install a popup library to accomplish the wanted feature.&lt;/p&gt;
&lt;h2 id=&#34;install-with-yarn--webpacker&#34;&gt;Install with Yarn &amp;amp; Webpacker&lt;/h2&gt;
&lt;p&gt;Add the Tippy.js library using &lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;command-line-&#34;&gt;Command Line&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yarn add tippy.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Afterwords, create a css file to load the module&amp;rsquo;s styles:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appjavascriptstylesheetspopupcss-&#34;&gt;app/javascript/stylesheets/popup.css&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;@&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tippy.js/dist/tippy.css&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#6272a4&#34;&gt;/*Custom style*/&lt;/span&gt;

.&lt;span style=&#34;color:#50fa7b&#34;&gt;popup&lt;/span&gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;

  .image {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin-bottom&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin-top&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;

    img {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you do not use a css style path such as &lt;code&gt;app/javascripts/stylesheets/&lt;/code&gt; in your build, you can load the the Tippy.js library styles in the &lt;code&gt;packs&lt;/code&gt; file:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;h4 class=&#34;snippet-heading no-file-only&#34; id=&#34;appjavascriptspacksapplicationjs-&#34;&gt;app/javascripts/packs/application.js&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tippy.js/dist/tippy.css&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;stimulus-integration&#34;&gt;Stimulus Integration&lt;/h2&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appjavascriptcontrollerspopup_controllerjs--&#34;&gt;app/javascript/controllers/popup_controller.js &lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { Controller } from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stimulus&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; tippy from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tippy.js&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../stylesheets/popup.scss&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; Controller {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; targets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trigger&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;]

  initialize() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.initPopup();

    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.contentTarget.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;;
  }

  initPopup() {
    tippy(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.triggerTarget, {
      content&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.contentTarget.innerHTML,
      allowHTML&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We load the &lt;code&gt;tippy&lt;/code&gt; module at the top of the stimulus controller file along with the stylesheet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Do not load the stylesheet if already imported in &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; tippy from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tippy.js&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../stylesheets/popup.scss&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have two stimulus targets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; targets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trigger&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;this.triggerTarget&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the HTML element we will be passing into the &lt;code&gt;tippy()&lt;/code&gt; function. It will turn the element into a trigger for the popup component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;this.contentTarget&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the HTML content that the popup will contain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the &lt;code&gt;initialize()&lt;/code&gt; stimulus life-cycle function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;initialize() {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.initPopup();

  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.contentTarget.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the &lt;code&gt;initPopup()&lt;/code&gt; method, we set &lt;code&gt;this.popup&lt;/code&gt; to the return call of &lt;code&gt;tippy()&lt;/code&gt; in order to access the popup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;initPopup() {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.popup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tippy(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.triggerTarget, {
    content&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.contentTarget.innerHTML,
    allowHTML&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first argument passed into the &lt;code&gt;tippy()&lt;/code&gt; function is the element that will toggle the popup. In this case our &lt;code&gt;this.triggerTarget&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second argument is a options object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this.contentTarget.innerHTML&lt;/code&gt; is set as the &lt;code&gt;content&lt;/code&gt; option.&lt;/li&gt;
&lt;li&gt;In order to allow for HTML rendering from Tippy.js we set the the &lt;code&gt;allowHTML&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional options can be found at Tippy.js &lt;a href=&#34;https://atomiks.github.io/tippyjs/&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To prevent from the content from rendering outside the popup we hide it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.contentTarget.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;haml-view-changes&#34;&gt;HAML View Changes&lt;/h2&gt;
&lt;p&gt;Now we have to update our fabric partial to utilize the &lt;code&gt;popup&lt;/code&gt; controller:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appviewsfabrics_fabrichtmlhaml--1&#34;&gt;app/views/fabrics/_fabric.html.haml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;li
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;avatar{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;controller&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;:popup&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;target&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;popup.trigger&amp;#34;&lt;/span&gt; } }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; image_pack_tag(fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image, &lt;span style=&#34;color:#f1fa8c&#34;&gt;class&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;circular&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;div{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;target&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;popup.content&amp;#34;&lt;/span&gt; } }
      &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;popup
        &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image
          &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; image_pack_tag(fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data
          Created &lt;span style=&#34;color:#f1fa8c&#34;&gt;On&lt;/span&gt;:
          &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; display_date fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;created_at

  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;titleize
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/popup.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looks Good!&lt;/p&gt;
&lt;p&gt;Now lets do some refactoring to clean up our view and make the popup controller more modular.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appjavascriptcontrollerspopup_controllerjs---1&#34;&gt;app/javascript/controllers/popup_controller.js &lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { Controller } from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stimulus&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; tippy from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tippy.js&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../stylesheets/popup.scss&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; Controller {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; targets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trigger&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;]

  initialize() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.trigger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.getTrigger();
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.content &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.getContent();

    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.initPopup();

    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.content.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;;
  }

  initPopup() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.popup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tippy(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.trigger, {
      content&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.content.innerHTML,
      allowHTML&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
    });
  }

  getContent() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.hasContentTarget) {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.contentTarget;
    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; content &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
      content.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.data.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;);

      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; content
    }
  }

  getTrigger() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.hasTriggerTarget) {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.triggerTarget;
    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.element;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appviewsfabrics_fabrichtmlhaml--2&#34;&gt;app/views/fabrics/_fabric.html.haml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;li
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;avatar{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;controller&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;:popup&lt;/span&gt;,
                   &lt;span style=&#34;color:#f1fa8c&#34;&gt;popup&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;content&lt;/span&gt;: render(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;popup&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;fabric&lt;/span&gt;: fabric) } } }

    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; image_pack_tag(fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image, &lt;span style=&#34;color:#f1fa8c&#34;&gt;class&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;circular&amp;#34;&lt;/span&gt;)

  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;titleize
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appviewsfabrics_popuphtmlhaml-&#34;&gt;app/views/fabrics/_popup.html.haml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;popup
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; image_pack_tag(fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data
    Created &lt;span style=&#34;color:#f1fa8c&#34;&gt;On&lt;/span&gt;:
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; display_date fabric&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;created_at
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Color Picker with Ruby on Rails 6, Stimulus and Webpacker</title>
      <link>https://chrislabarge.com/posts/color-picker/</link>
      <pubDate>Sun, 12 Apr 2020 18:30:21 -0500</pubDate>
      
      <guid>https://chrislabarge.com/posts/color-picker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://color-picker-demo.herokuapp.com/&#34;&gt;Demo Application&lt;/a&gt; - Hosted on a Free dyno. (May take 10-20 seconds to wake up)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chrislabarge/color-picker-demo&#34;&gt;Github&lt;/a&gt; - Git repo for the hosted application.&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Ruby on Rails 6.0.2.2&lt;/a&gt; - Ruby Web Framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stimulusjs/stimulus&#34;&gt;StimulusJS&lt;/a&gt; - A minimal Javascript framework developed by Basecamp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/webpacker&#34;&gt;Webpacker&lt;/a&gt; - Rails gem for using Webpack to bundle assets including Javascript modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Simonwep/pickr&#34;&gt;Pickr&lt;/a&gt; - Color Picker Javascript library.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;set-up&#34;&gt;Set Up&lt;/h2&gt;
&lt;p&gt;This tutorial assumes that you have a Rails application with webpacker and stimulus installed (&lt;em&gt;along with some familiarity using each&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If you are using Rails &amp;gt;= 6.0 version, you can generate the application with the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rails new sample_app --webpacker&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;stimulus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The demo model we working with is the &lt;code&gt;ColorOption&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;ColorOption(
  id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; integer,
  font_color&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; string,
  background_color&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; string,
  created_at&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; datetime,
  updated_at&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; datetime
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see above the model has two &lt;code&gt;string&lt;/code&gt; columns&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;font_color: string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background_color: string&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These will be updated by the Color Picker. The columns can currently be updated using a regular rails form.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appviewscolor_options_formhtmlhaml-&#34;&gt;app/views/color_options/_form.html.haml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form_with(&lt;span style=&#34;color:#f1fa8c&#34;&gt;model&lt;/span&gt;: local_assigns&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:model&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;local&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;field
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text_field &lt;span style=&#34;color:#f1fa8c&#34;&gt;:font_color&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#f1fa8c&#34;&gt;:font_color&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;field
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text_field &lt;span style=&#34;color:#f1fa8c&#34;&gt;:background_color&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#f1fa8c&#34;&gt;:background_color&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;field
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;submit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/standard.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pretty standard stuff, now lets get the Color Picker library installed.&lt;/p&gt;
&lt;h2 id=&#34;install-with-yarn--webpacker&#34;&gt;Install with Yarn &amp;amp; Webpacker&lt;/h2&gt;
&lt;p&gt;Add the Pickr library using &lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;command-line-&#34;&gt;Command Line&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yarn add @simonwep/pickr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Afterwords, create a css file to load the module&amp;rsquo;s styles.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appjavascriptstylesheetscolor_pickercss-&#34;&gt;app/javascript/stylesheets/color_picker.css&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*Change &amp;#39;classic&amp;#39; to which ever theme you are using from Pickr*/&lt;/span&gt;
@&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@simonwep/pickr/dist/themes/classic.min.css&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#6272a4&#34;&gt;/*Custom form field style*/&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;field&lt;/span&gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;pickr&lt;/span&gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;inline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;block&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you do not use a css style path such as &lt;code&gt;app/javascripts/stylesheets/&lt;/code&gt; in your build, you can load the the Pickr library styles in the &lt;code&gt;packs&lt;/code&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;h4 class=&#34;snippet-heading no-file-only&#34; id=&#34;appjavascriptspacksapplicationjs-&#34;&gt;app/javascripts/packs/application.js&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@simonwep/pickr/dist/themes/classic.min.css&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;stimulus-integration&#34;&gt;Stimulus Integration&lt;/h2&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appjavascriptcontrollerscolor_picker_controllerjs--&#34;&gt;app/javascript/controllers/color_picker_controller.js &lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { Controller } from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stimulus&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Pickr from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@simonwep/pickr&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../stylesheets/color_picker.css&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; Controller {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; targets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;picker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;]

  initialize() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.initPicker();
  }

  initPicker() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.picker &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Pickr.create({
      el&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.pickerTarget,
      theme&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;classic&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.inputTarget.value,

      components&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        preview&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
        opacity&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
        hue&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,

        interaction&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
          hex&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
          rgba&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
          hsla&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,
          hsva&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,
          cmyk&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,
          input&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
          clear&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,
          save&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
        },
      },
    });

    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.picker.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;save&amp;#39;&lt;/span&gt;, (color, _instance) =&amp;gt; {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.inputTarget.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; color.toHEXA().toString();

      &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.picker.hide();
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We load the &lt;code&gt;Pickr&lt;/code&gt; class from the node module at the top of the stimulus controller file along with the stylesheet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Do NOT load the stylesheet if already imported in &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Pickr from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@simonwep/pickr&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../stylesheets/color_picker.css&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have two stimulus targets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; targets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;picker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;this.pickerTarget&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the HTML element we will be using to initialize the Picker class with. It will turn the element into a Picker button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;this.inputTarget&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This Is the HTML form input we will fill after a color has been selected/picked.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the &lt;code&gt;initialize()&lt;/code&gt; stimulus lifecycle function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;initialize() {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.initPicker();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To call &lt;code&gt;this.initPicker()&lt;/code&gt; which contains all of the logic to intialize the Pickr component.&lt;/p&gt;
&lt;p&gt;We set an instance of the Pickr class to &lt;code&gt;this.picker&lt;/code&gt; in order to use in the callback.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;initPicker() {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.picker &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Pickr.create(...)

  &lt;span style=&#34;color:#6272a4&#34;&gt;//ect...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The create settings were provided by the Picker &lt;a href=&#34;https://github.com/Simonwep/pickr&#34;&gt;README&lt;/a&gt; with the exception of setting &lt;code&gt;el&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;el&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.pickerTarget,
&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.inputTarget.value,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This uses the controller&amp;rsquo;s &lt;code&gt;this.pickerTarget&lt;/code&gt; to set the picker element, and the value of &lt;code&gt;this.inputTarget&lt;/code&gt; to initialize the Picker with.&lt;/p&gt;
&lt;p&gt;We then use the on &lt;code&gt;save&lt;/code&gt; Pickr callback in order to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the input field&amp;rsquo;s value&lt;/li&gt;
&lt;li&gt;Hide the widget&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a user has clicked &amp;ldquo;Save&amp;rdquo; on the Color Picker.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.picker.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;save&amp;#34;&lt;/span&gt;, (color, _instance) =&amp;gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.inputTarget.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; color.toHEXA().toString();

  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.picker.hide();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;final-touches&#34;&gt;Final Touches&lt;/h2&gt;
&lt;p&gt;Now all we have to do is update our form partial to utilize the &lt;code&gt;color-picker&lt;/code&gt; controller.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appviewscolor_options_formhtmlhaml--1&#34;&gt;app/views/color_options/_form.html.haml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form_with(&lt;span style=&#34;color:#f1fa8c&#34;&gt;model&lt;/span&gt;: local_assigns&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:model&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;local&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;field{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;controller&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color-picker&amp;#34;&lt;/span&gt; } }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text_field &lt;span style=&#34;color:#f1fa8c&#34;&gt;:font_color&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;target&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color-picker.input&amp;#34;&lt;/span&gt; }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;div{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;target&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color-picker.picker&amp;#34;&lt;/span&gt; } }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#f1fa8c&#34;&gt;:font_color&lt;/span&gt;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;field{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;controller&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color-picker&amp;#34;&lt;/span&gt; } }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text_field &lt;span style=&#34;color:#f1fa8c&#34;&gt;:background_color&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;target&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color-picker.input&amp;#34;&lt;/span&gt; }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;div{ &lt;span style=&#34;color:#f1fa8c&#34;&gt;data&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;target&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color-picker.picker&amp;#34;&lt;/span&gt; } }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#f1fa8c&#34;&gt;:background_color&lt;/span&gt;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;field
    &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;submit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/stimulus.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use Rails Active Record Relation method #delete_all</title>
      <link>https://chrislabarge.com/posts/delete-all/</link>
      <pubDate>Wed, 23 May 2018 18:30:21 -0500</pubDate>
      
      <guid>https://chrislabarge.com/posts/delete-all/</guid>
      <description>&lt;h2 id=&#34;what-you-will-learn&#34;&gt;What You Will Learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to use &lt;a href=&#34;https://apidock.com/rails/v6.0.0/ActiveRecord/Relation/delete_all&#34;&gt; ActiveRecord::Relation#delete_all &lt;/a&gt; - A fast way to delete a large batch of rows from a Database table&lt;/li&gt;
&lt;li&gt;How to use &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-in_batches&#34;&gt; ActiveRecord::Batches::BatchEnumerator#in_batches &lt;/a&gt; - To prevent from locking your Database&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;who-this-is-for&#34;&gt;Who This Is For&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruby on Rails developers who need to delete records more efficiently.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Ruby on Rails&lt;/a&gt; &amp;gt;= 5.0&lt;/li&gt;
&lt;li&gt;Relational Database like &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt; or &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I am currently working on a Rails project that deals with importing and
exporting large amounts of data from excel sheets.  The user is able to import
and save the data into the application&amp;rsquo;s Database and also delete the data.&lt;/p&gt;
&lt;p&gt;Because some of these deletions can consist of hundreds of thousands of rows, the
removal feature must be developed a little differently.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;When a User imports/uploads new data into the application, a&lt;code&gt;DataUpload&lt;/code&gt; record
is created, along with a new &lt;code&gt;DataSet&lt;/code&gt; record, for every single row from the
imported exec sheet.&lt;/p&gt;
&lt;p&gt;The model &lt;code&gt;DataSet&lt;/code&gt; has a &lt;code&gt;belongs_to&lt;/code&gt; relationship to &lt;code&gt;DataUpload&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appmodelsdata_setrb-&#34;&gt;app/models/data_set.rb&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSet&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; ApplicationRecord
  belongs_to &lt;span style=&#34;color:#f1fa8c&#34;&gt;:data_uploads&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The model &lt;code&gt;DataUpload&lt;/code&gt; has a &lt;code&gt;has_many&lt;/code&gt; relationship to &lt;code&gt;DataSet&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appmodelsdata_uploadrb-&#34;&gt;app/models/data_upload.rb&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataUpload&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; ApplicationRecord
  has_many &lt;span style=&#34;color:#f1fa8c&#34;&gt;:data_sets&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;dependent&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;:destroy&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the &lt;code&gt;dependent: :destroy&lt;/code&gt;.  This means that when a &lt;code&gt;DataUpload&lt;/code&gt; record
gets deleted/destroyed, all of the associated &lt;code&gt;DataSet&lt;/code&gt; records will be
destroyed as well.&lt;/p&gt;
&lt;p&gt;This also loads every associated &lt;code&gt;DataSet&lt;/code&gt; model instance into memory as well.
This will bog down the server if there is a very large association of thousands
of &lt;code&gt;DataSet&lt;/code&gt; records.&lt;/p&gt;
&lt;p&gt;The way we solve this is to use the &lt;code&gt;ActiveRecord::Relation#delete_all&lt;/code&gt;. This
&lt;a href=&#34;https://apidock.com/rails/ActiveRecord/Relation/delete_all&#34;&gt;method&lt;/a&gt; performs a
single SQL statement and efficiently deletes all of the records within the
Relation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Look at the example below.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;upload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; DataUpload&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;last
data_sets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; upload&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data_sets

data_sets&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;delete_all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;warning&#34;&gt;WARNING&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use this method on more then 5,000 records in a Database table.  It will lock the Database for the entire transaction.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#delete_all&lt;/code&gt; does not load the record, so any callbacks will not be fired.  Make sure the application and/or model is not dependent on any pre/post delete processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we can implement the method in the in the &lt;code&gt;DataUpload&lt;/code&gt; callback.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appmodelsdata_uploadrb--1&#34;&gt;app/models/data_upload.rb&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataUpload&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; ApplicationRecord
  has_many &lt;span style=&#34;color:#f1fa8c&#34;&gt;:data_sets&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;dependent&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;:delete_all&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;BUT WAIT!!&lt;/strong&gt; If you were a good reader and saw the first WARNING above you
will notice that if I left the code this way and a particular &lt;code&gt;DataUpload&lt;/code&gt;
instance had an association of more then 5,000 &lt;code&gt;DataSet&lt;/code&gt; records&amp;hellip; the
Database will lock for the entire transaction. To prevent from this we must
utilize one of the Ruby on Rails 5.0
&lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-in_batches&#34;&gt;methods&lt;/a&gt;
&lt;code&gt;#in_batches&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you are not use a Rails version that is &amp;gt;= 5.0 then check out the gem &lt;a href=&#34;https://github.com/ankane/delete_in_batches&#34;&gt;delete_in_batches&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;appmodelsdata_uploadrb--2&#34;&gt;app/models/data_upload.rb&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataUpload&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; ApplicationRecord
  has_many &lt;span style=&#34;color:#f1fa8c&#34;&gt;:data_sets&lt;/span&gt;

  before_destroy &lt;span style=&#34;color:#f1fa8c&#34;&gt;:destroy_data_sets&lt;/span&gt;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;destroy_data_sets&lt;/span&gt;
    data_sets&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;in_batches(&lt;span style=&#34;color:#f1fa8c&#34;&gt;of&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;delete_all
  &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we remove the previous callback &lt;code&gt;dependent: :delete_all&lt;/code&gt;, and replace it
with &lt;code&gt;before_destroy&lt;/code&gt; callback and pass in the new private method
&lt;code&gt;#destroy_data_sets&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will notice that &lt;code&gt;#in_batches&lt;/code&gt; takes an option &lt;code&gt;:of&lt;/code&gt; set to &lt;code&gt;1000&lt;/code&gt;. This
will limit the amount of records deleted in a single SQL transaction to 1,000.
Thus preventing the Database from locking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Chrome Driver For Headless Scraping and Downloading</title>
      <link>https://chrislabarge.com/posts/headless-scrape/</link>
      <pubDate>Fri, 20 Apr 2018 18:30:21 -0500</pubDate>
      
      <guid>https://chrislabarge.com/posts/headless-scrape/</guid>
      <description>&lt;h2 id=&#34;what-you-will-learn&#34;&gt;What You Will Learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to use a non headless web driver on a headless server.&lt;/li&gt;
&lt;li&gt;How to setup the Chrome Driver with Selenium and Capybara.&lt;/li&gt;
&lt;li&gt;How to set up the driver to allow for automatic browser downloads.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;who-this-is-for&#34;&gt;Who This Is For&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruby developers wanting to use the Chrome Driver for their browser automations.&lt;/li&gt;
&lt;li&gt;Coders looking for a solution to headless file downloads using the browser.&lt;/li&gt;
&lt;li&gt;Coders that need to run a non headless web driver in a headless environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt; Capybara &lt;/a&gt; and &lt;a href=&#34;http://robotframework.org/SeleniumLibrary/&#34;&gt; Selenium &lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;Framework(ex Rails) or program utilizing the above libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Recently I was making some scrapers for a client who needed pdf&amp;rsquo;s downloaded. The program runs on a AWS Ubuntu server and is developed with the Ruby language and the Capybara library. Because this is running in a headless environment I decided to go with Phantom JS as my web driver using Poltergeist gem to integrate it with Ruby and Capybara. I use this driver for integration testing when developing in Rails and have found it accomplished most of what I asked of it, without having to rely on the Selenium Library&lt;/p&gt;
&lt;p&gt;Most of the pdf&amp;rsquo;s I was scraping came from websites that would render them at URL  endpoints. This allowed me to just scrape the URL string with Phantom JS and use the Ruby module &lt;a href=&#34;https://ruby-doc.org/stdlib-2.4.3/libdoc/open-uri/rdoc/OpenURI.html&#34;&gt; open-uri &lt;/a&gt; to handle the downloading of the actual pdf document.&lt;/p&gt;
&lt;p&gt;Well unfortunetly I ran into a situation where the website would only let the user download the pdf as a file-attachment.  You cannot download files from the browser using Phantom JS.  This makes sense considering the whole point of Phantom JS is that it is truley headless driver.&lt;/p&gt;
&lt;p&gt;I would have to bring in &lt;a href=&#34;http://robotframework.org/SeleniumLibrary/&#34;&gt; Selenium &lt;/a&gt; after all.  Selenium is the end all be all of  automated browser interaction libraries. You can utilize several different web drivers with it, and integrate it with Capybara.  This allowed me to use Selenium in replace of Poltergiest without having to change any of my code.&lt;/p&gt;
&lt;p&gt;I decided to go with the &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/&#34;&gt; Chrome Driver &lt;/a&gt; because I when I was researching how I could download the pdf&amp;rsquo;s using a headless driver someone suggested that the Chrome Driver had a new headless feature that would allow for downloading.(nope!)&lt;/p&gt;
&lt;p&gt;I plugged it in and started running the headless feature as I would Phantom JS. I actually really enjoyed the speed and performance of the driver.  I might start using it as my integration driver from now on.  Unfortunetly, it would not allow for downloads using the browser while using headless mode.(at least at this point)&lt;/p&gt;
&lt;p&gt;However, I was able to download the file using the non-headless mode of the Chrome Driver.&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The following is for installing the driver on Ubuntu&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Make sure Chrome is installed. &lt;a href=&#34;https://askubuntu.com/questions/510056/how-to-install-google-chrome&#34;&gt; Install Options &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download and extract the Chrome Driver from the &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/downloads&#34;&gt; Download Link &lt;/a&gt;. Then move the extracted binary driver file to &amp;ldquo;/usr/local/bin&amp;rdquo;&lt;/p&gt;
&lt;p&gt;There are some preferences and arguments you have to send/set in the Chrome Driver to be able to download files from the browser.
These will allow the browser to immediately download the file without having to accept the save_as prompt that ususally pops up.  You will also have to tell the driver what folder you would like the files to be downloaded to.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;config-or-initializer-file&#34;&gt;config or initializer file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;driver_options&lt;/span&gt;
  download_directory &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;./downloads/&amp;#39;&lt;/span&gt;

  { &lt;span style=&#34;color:#f1fa8c&#34;&gt;args&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;test-type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;disable-extensions&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;,
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;prefs&lt;/span&gt;: {
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;plugins&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;always_open_pdf_externally&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; },
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;savefile&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;default_directory&lt;/span&gt;: download_directory },
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;download&lt;/span&gt;: { &lt;span style=&#34;color:#f1fa8c&#34;&gt;prompt_for_download&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,
                  &lt;span style=&#34;color:#f1fa8c&#34;&gt;default_directory&lt;/span&gt;: download_directory }
    }
  }
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above I have wrapped the options within a ruby function.  I will call this function when passing the parameter option [:chromeOptions] to the #chrome method for  Remote::Capabilities. This takes place below when registering the driver with Capybara.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;config-or-initializer-file-1&#34;&gt;config or initializer file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;Capybara&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;register_driver &lt;span style=&#34;color:#f1fa8c&#34;&gt;:chrome&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;app&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;
  capabilities &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Selenium&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;WebDriver&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Remote&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;
    Capabilities&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;chrome(
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;chromeOptions&lt;/span&gt;: driver_options
    )

  Capybara&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Selenium&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Driver&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;new(
    app,
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;browser&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;:chrome&lt;/span&gt;,
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;desired_capabilities&lt;/span&gt;: capabilities
  )
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;

Capybara&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ignore_hidden_elements &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The hash from the function #driver_options() gets parsed by the Selenium Library and then passed to the chrome driver.&lt;/p&gt;
&lt;p&gt;If you want to see a complete list of options that you can pass to the chrome driver check out this &lt;a href=&#34;https://stackoverflow.com/questions/38335671/selenium-chrome-where-can-i-find-a-list-of-all-available-chromeoption-arguments&#34;&gt;stacked overflow response&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now when I  run the scraper locally using &amp;hellip;&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;command-line&#34;&gt;Command Line&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bundle &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exec&lt;/span&gt; rake scrape_pdfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The chrome browser window pops up and runs through the list of the Capybara session commands, navigating to the download link, and then clicking the link.  This is where the driver options come to play and automatically save the file to the proper directory.&lt;/p&gt;
&lt;p&gt;Great!  But I need this same thing to happen on the AWS with no monitor. What am I to do?&lt;/p&gt;
&lt;p&gt;Well that is where  Xvfb comes it.  It creates a virtual monitor and allows you to use non headless web drivers in headless environments.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tobyho.com/2015/01/09/headless-browser-testing-xvfb/&#34;&gt;Xvfb Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As long as Xvfb is properly installed all you need to do is pass the command that kicks off your Capybara Session to the &amp;ldquo;xvfb-run&amp;rdquo; command.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;command-line-1&#34;&gt;Command Line&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xvfb-run bundle &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exec&lt;/span&gt; rake scrape_pdfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can no longer watch the scrape occur on my monitor, but after the program is done running, I can verify it worked by finding a freshly downloaded pdf in my &amp;ldquo;./downloads&amp;rdquo; folder.&lt;/p&gt;
&lt;p&gt;And there you have it a simple way to run non headless Chrome Driver session in a headless server environment, in order to download files using the browser.&lt;/p&gt;
&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;p&gt;The default screen size for the &amp;ldquo;xfvb-run&amp;rdquo; command is fairly small.  So if you are interacting with a responsive website and need you change the virtual screen dimensions run the command like so&amp;hellip;&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;command-line-2&#34;&gt;Command Line&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xvfb-run --server-args&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-screen 0 1024x768x24&amp;#39;&lt;/span&gt; bundle &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exec&lt;/span&gt; rake scrape_pdfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
