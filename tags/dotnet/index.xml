<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on Chris LaBarge - Software Developer - Portfolio</title>
    <link>https://chrislabarge.com/tags/dotnet/</link>
    <description>Recent content in dotnet on Chris LaBarge - Software Developer - Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://chrislabarge.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configure (Neo)Vim for Unity Game Engine Development</title>
      <link>https://chrislabarge.com/posts/neovim-unity-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chrislabarge.com/posts/neovim-unity-engine/</guid>
      <description>&lt;h2 id=&#34;tools---install-the-following&#34;&gt;Tools - &lt;em&gt;Install the following&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;NeoVim&lt;/a&gt; - Open source fork of the Vim editor.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;Neovim-CoC&lt;/a&gt; - Intellisense Engine - Make your Vim/Neovim as smart as VSCode.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vim&#34;&gt;OmniSharp-vim&lt;/a&gt;  - A great vim plugin that installs omnisharp and integrates with mono/.NET and Coc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; - Open Sourced version of the .NET software framework - Unity compiles c# code to c++. &lt;em&gt;Only needed if you are developing on OSX/Linux&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unity.com/&#34;&gt;Unity&lt;/a&gt; - Game Development Engine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/neovim-remote&#34;&gt;Neovim-Remote&lt;/a&gt; - This is a python
executable script that extends Neovim to allow for remote features that are
available with regular vim.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;Neovim-CoC&lt;/a&gt; is a very robust vim plugin
which allows for numerous extensions and configurations.  It is not really an
&amp;ldquo;out of the box&amp;rdquo; solution, and you will have to get your hands dirty. Having
said that, I really appreciate all of the work that is going into this plugin,
and can&amp;rsquo;t imagine developing without it.&lt;/p&gt;
&lt;p&gt;If you use a different &lt;code&gt;Intellisense&lt;/code&gt; solution, just make sure &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vim&#34;&gt;OmniSharp-vim&lt;/a&gt; is compatible with it.&lt;/p&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;I LOVE editing code in Vim.  Recently I
decided to dabble with the Unity Game Engine. Unity has terrific
built in integration with VScode, but not with Vim.&lt;/p&gt;
&lt;p&gt;Luckily Unity allows for integrating any editor that can accept &lt;code&gt;line&lt;/code&gt; and &lt;code&gt;file&lt;/code&gt;  arguments.&lt;/p&gt;
&lt;p&gt;Open up your Unity game/project.&lt;/p&gt;
&lt;p&gt;From the tool bar select:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;edit--preferences--external-tools-&#34;&gt;edit &amp;gt; preferences &amp;gt; External Tools&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/unity-files.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see there is a dropdown that allows for choosing a text editor executable file.&lt;/p&gt;
&lt;p&gt;You must create the file first in order to choose it.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;utilitiesneovim-unity-&#34;&gt;Utilities/neovim-unity&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;gnome-terminal -- nvr --servername unity &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets breakdown this simple file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gnome-terminal&lt;/code&gt; is the executable command that opens a new terminal window on my machine. If you use a different terminal the command will be different.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nvr --servername unity $@&lt;/code&gt; is the argument, which itself is a command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nvr&lt;/code&gt; is the executable command for &lt;code&gt;neovim-remote&lt;/code&gt;.  This is needed because you are unable to pass server and remote options into &lt;code&gt;neovim&lt;/code&gt; like you can for &lt;code&gt;vim&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--servername unity&lt;/code&gt; is how we name the neovim server instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$@&lt;/code&gt; allows the Unity Game Editor to pass in File arguments into the (executable) file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we must make the file an executable.&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;command-line-&#34;&gt;Command Line&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; Utilities
chmod +x neovim-unity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Choose the newly created executable file in the Unity preferences.
The external script editor arguments field will appear.&lt;/p&gt;
&lt;p&gt;Add the following line:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;external-script-editor-args-&#34;&gt;External Script Editor Args&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  --remote-silent +&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;Line&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;File&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class=&#34;snippet-heading&#34; id=&#34;edit--preferences--external-tools--1&#34;&gt;edit &amp;gt; preferences &amp;gt; External Tools&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/unity-nvim.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you can open/debug files within the Unity UI and it will automatically open the file in your Vim editor.&lt;/p&gt;
&lt;p&gt;However you will notice that the intellisense is most likely not working.&lt;/p&gt;
&lt;p&gt;First, we must edit the &lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;Neovim-CoC&lt;/a&gt; configuration file.
Within vim enter the following command:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;neovim-command-&#34;&gt;(Neo)Vim Command&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;:CocConfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will open you configuration file for &lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;Neovim-CoC&lt;/a&gt;.
Add the following lines to the object:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading&#34; id=&#34;coc-configjson-&#34;&gt;CoC config.json&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  //...
  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;coc.source.OmniSharp.enable&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;coc.source.OmniSharp.triggerCharacters&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you must generate the project files so that the OmniSharp server can analyze the project.&lt;/p&gt;
&lt;p&gt;In order to do this, switch the External Text Editor option back to &amp;ldquo;Open by file extension&amp;rdquo;. (&lt;em&gt;For some reason it will not allow for generating these files when the nvim-unity is selected&lt;/em&gt;) You will now have the options to &lt;code&gt;regenerate project files&lt;/code&gt;.
Make sure the following are checked before regenerating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embedded Packages&lt;/li&gt;
&lt;li&gt;Registry Packages&lt;/li&gt;
&lt;li&gt;Local Packages&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class=&#34;snippet-heading no-file-only&#34; id=&#34;edit--preferences--external-tools--2&#34;&gt;edit &amp;gt; preferences &amp;gt; External Tools&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/unity-files.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Switch the External Text Editor option back to &amp;ldquo;neovim-unity&amp;rdquo;. Make
sure that the argument field still has the following:&lt;/p&gt;
&lt;h4 class=&#34;snippet-heading no-file-only&#34; id=&#34;external-script-editor-args--1&#34;&gt;External Script Editor Args&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;--remote-silent +&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;Line&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;File&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class=&#34;snippet-heading no-file-only&#34; id=&#34;edit--preferences--external-tools--3&#34;&gt;edit &amp;gt; preferences &amp;gt; External Tools&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/unity-nvim.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, upon opening any &lt;code&gt;.cs&lt;/code&gt; file within the project, should open in vim, and
your OmniSharp server should start up, analyze the project files, and provide
you with an IDE like experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chrislabarge.com/img/nvim-unity.gif#visible&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;side-note&#34;&gt;Side Note&lt;/h2&gt;
&lt;p&gt;If there are any issues with the OmniSharp server, make sure to follow ALL of the installation instructions at &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vim&#34;&gt;OmniSharp-vim&lt;/a&gt;. There are a few different caveats in regards to the operating system you are running.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
